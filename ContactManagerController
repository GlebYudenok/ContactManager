public class ContactManagerController {
    
    public String sortOrder = 'CreatedDate DESC ';
    
    private integer count=1;   //to track the function calling
    private integer counter=0;   //to keep track of offset
    private integer list_size=10; //to set the page size to show the rows/records
    public integer total_size; //used to show user the total size of the list 
    public integer totalPages{get;set;}
    public integer pageNumber{get;set;}
    
    public String wordForSearch{get;set;}
    public List<Contact> foundContacts{get;set;}
     public List<Contact> results{get;set;}    
    private final Contact contact;
    //flag, that shows what should be display on screen
    private boolean flag = false;
    
    public void myInputQuery()
    {
        if(!String.isEmpty(wordForSearch)) {
          List<List<SObject>> 
          founds = 
              [FIND :wordForSearch IN Name FIELDS RETURNING Contact(FirstName, LastName,
                                                                 Name, Phone, Email, 
                                                                 Contact_Level__c, Account.Name, 
                                                                 OwnerId, CreatedById, CreatedDate)];
          results = (List<Contact>)founds[0];
          System.debug(results);
          flag = true;
        }
    }
    
    public ContactManagerController(ApexPages.StandardSetController controller) 
    {
      this.contact = (Contact)controller.getRecord();
        total_size=[select count() from Contact];    //set the total size in the constructor 
        totalPages = total_size / 10;
        pageNumber = 1;
    }
    
    public List<Contact> getContacts() 
    {
        if(flag == false) 
        {
          results = Database.query('SELECT Name, FirstName, LastName, Email, ' + 
                                  + 'Contact_Level__c, Account.Name, OwnerId, CreatedById, CreatedDate '
                                  + 'FROM Contact ORDER BY ' + sortOrder + ' LIMIT 10');
        }
        
        flag = false;
        System.debug('last action');
        return results;
    }
    
    public void sortByName() 
    {
        this.sortOrder = 'Name';
    }
    
    public void sortByCreatedDate() 
    {
        this.sortOrder = 'CreatedDate DESC ';
    }
    
    public void sortByEmail() 
    {
        this.sortOrder = 'Email';
    }
    
    public void sortByContactLevel() 
    {
        this.sortOrder = 'Contact_Level__c';
    }
    
    public void sortByOwnerId() 
    {
        this.sortOrder = 'OwnerId';
    }
    
    public void sortByCreatedById() 
    {
        this.sortOrder = 'CreatedById';
    }
    
    public void sortByAccountName() 
    {
        this.sortOrder = 'Account.Name';
    }
    
    public void searchWord() 
    {
       List<Contact> results = Database.query('SELECT Name, FirstName, LastName, Email, ' + 
                                  + 'Contact_Level__c, Account.Name, OwnerId, CreatedById, CreatedDate '
                                  + 'FROM Contact LIMIT 10');  
    }
    
    //user clicked the previous button
    public PageReference Previous() 
    { 
      counter -= list_size;
        if(count==1){
          results=[SELECT Name, FirstName, LastName, Email,
                     Contact_Level__c, Account.Name, OwnerId, CreatedById, CreatedDate 
            FROM Contact LIMIT 10 offset 10 ];
           count++;
        }else { 
           results=[SELECT Name, FirstName, LastName, Email,
                     Contact_Level__c, Account.Name, OwnerId, CreatedById, CreatedDate 
            FROM Contact LIMIT 10 ];
        }
    pageNumber -= 1;        
        flag = true;
        return null;
    }
    
    //user clicked the Next button
    public PageReference Next() 
    {    
      counter += list_size;
        results=[SELECT Name, FirstName, LastName, Email,
                 Contact_Level__c, Account.Name, OwnerId, CreatedById, CreatedDate 
            FROM Contact LIMIT 10 offset 10];
        pageNumber += 1;
        flag = true;
        return null;
    }
    
    //this will disable the previous and beginning buttons
    public Boolean getDisabledPrevious() 
    {           
        if(counter>0)
             return false;
         else 
             return true;
    }

    //this will disable the next and end buttons
    public Boolean getDisabledNext() 
    {            
      if (counter + list_size < total_size) 
            return false; 
        else 
            return true;
    }
}
